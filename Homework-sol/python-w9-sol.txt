下面1-3题是上周练习中尚未完成的题目

1.  假设list1 = [1, 3, 2, 4, 5, 2, 1, 0], 请问list1[:-1]为
	 A. 0
	 B. [1, 3, 2, 4, 5, 2, 1]
	 C. [1, 3, 2, 4, 5, 2]
	 D. [1, 3, 2, 4, 5, 2, 1, 0]

答案: B
切片，从第一个到最后一个（但不包括），选择B


2.  请问下列代码执行后的输出为？
list1 = [2,4,6,8,10,12,14,16,18,20] 
print (list1[0:1],list1[5:7])

A.  [2,4] [10, 12]
B.  [2,4] [12, 14]
C.  [2] [12, 14]
D.  [2] [10, 12, 14]

答案: C


3.   请问下列代码执行后的输出为？
myList = [1, 2, 5, 8, 9, 12]
print(myList[1:-1])
print(myList[-2])
print(myList[:]) 
print(myList[1::2]) 
print(myList[6])


答案:
myList = [1, 2, 5, 8, 9, 12]
print(myList[1:-1])             # [2, 5, 8, 9]
print(myList[-2])               # 9
print(myList[:])                # [1, 2, 5, 8, 9, 12]
print(myList[1::2])             # [2, 8, 12]
print(myList[6])                # IndexError



4.  已经定义了一个列表s，请问你能想出几种方法来获得该列表的拷贝？
s = list(range(20))

答案：
s1 = s[:]   # 切片
s2 = list(s) # 构造函数法
s3 = s.copy()   # copy method

import copy
s4 = copy.copy(s)


s5 = [] + s


s6 = []
s6.extend(s)   # extend method

s7 = []
for e in s:
    s7.append(e)



5.  请按照如下步骤写出相应的代码：
a. data初始化为包含5、3和7的列表
b. new_data初始化为包含1到20内的奇数的列表
c. data的第1个元素替换为该元素的相反数
d. 附加10到data的尾部
e. 插入22作为data的第3个元素
f. 删除data中第1个元素，并且将删除的元素输出
g. 将new_data中的所有值附加到data的尾部
h. 如果7在data中，则输出7在data中首次出现的位置
i. 统计7在data出现的次数
j. data进行原地排序
k. data进行原地逆序

答案：
data = [5, 3, 7]
new_data = list(range(1, 20, 2))
data[0] = -data[0]
data.append(10)
data.insert(2, 22)
print(data.pop(0))
data.extend(new_data)  # data += new_data
if 7 in data:
    print(data.index(7))
print(data.count(7))
data.sort()
data.reverse()



6. 这道题考察切片出现在赋值语句左边的情况。下面给出了一系列的代码，请在注释行的下面
写出相应的赋值语句，列表s的切片出现在赋值语句的左边，以将s的内容进行修改变为注释中给出
的列表。如果有可能,尽量采用range函数，切片时尽量使用最小的范围。

s = [2, 4, 6, 8, 10]
# [2, 4, 6, 8, 10, 10, 12, 14, 16, 18, 20]
s[5:] = range(10, 21, 2)
print(s)

s = [2, 4, 6, 8, 10]
# [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]
s[0:0] = range(-10, 1, 2)
print(s)

s = [2, 4, 6, 8, 10]
# [2, 4, 6, 'a', 'b', 'c', 8, 10]
s[3:3] = 'abc'
print(s)

s = [2, 4, 6, 8, 10]
# [2, 4, 9, 7, 5, 3, 1, 10]
s[2:4] = range(9, 0, -2) 
print(s)

s = [2, 4, 6, 8, 10]
# [2, 3, 4, 5, 6, 7, 6, 8, 10]
s[1:2] =range(3, 8) 
print(s)

s = [2, 4, 6, 8, 10]
# []
s[:] = []
print(s)

s = [2, 4, 6, 8, 10]
# [10, 8, 6, 4, 2]
s[:] = s[::-1]   # s[:] = reversed(s)
print(s)

s = [2, 4, 6, 8, 10]
# [2, 4, 6, 8]
s[4:] = []
print(s)

s = [2, 4, 6, 8, 10]
# [2, 10]
s[1:-1] = []
print(s)


7.  下列代码执行后输出为？
x, y = 1, 2
x, y = y, x
print(x, y)

	 A. 1 1
	 B. 2 2
	 C. 1 2
	 D. 2 1

答案：  D
x, y = 1, 2    # x = 1   y =2
x, y = y, x    # 调换顺序  x = 2   y = 1


8. 下列代码执行后变量x、y和z 的值是什么？

x, y, z = '123'

	 A. 1 2 3
	 B. '1' '2' '3'
	 C. '123' ''  ''
	 D. '123'  None  None

答案：  B
字符串为迭代对象，其元素为单个字符组成的字符串


9. 下列代码执行后变量x、y、z和f的值是什么？

f = list('abcdefg')
x, *y, f[:4], z = '1234567890'

答案：
x = '1'
y = ['2', '3', '4', '5', '6', '7', '8']
z = '0'
f =  ['9', 'e', 'f', 'g']

有*y，即扩展序列解包。
首先其他对象引用一一对应： x对应右边迭代对象的第一个元素， z对应倒数第一个，而f[:4]对应倒数第二个元素
这样： f[:4] = '9'  前面4个元素替换为'9'，  f =  ['9', 'e', 'f', 'g']
收集剩下的元素组成列表y， y = ['2', '3', '4', '5', '6', '7', '8']


10.  下列代码执行后的结果是？
list1 = range(3)
list2 = 'abcd'
list3 = 'ABC'
list4 = list(zip(list1,list2,list3))
print(list4)

    A. [(0, 'a', 'A'), (1, 'b', 'B'), (2, 'c', 'C') ]
    B. [(0, 'a', 'A'), (1, 'b', 'B'), (2, 'c', 'C'), (None, 'd', None) ]
    C. [[0, 'a', 'A'], [1, 'b', 'B'], [2, 'c', 'C'] ]
    D. 抛出异常

答案： A
zip从多个对象中取对应位置的元素构成元组，如果某个对象不再有更多元素时结束


11. 下列代码执行后的结果是？

list1 = range(3)
for i in enumerate(list1):
    print(i,end='\t')

    A. (0, 0)	(1, 1)	(2, 2)
    B. [0, 0]	[1, 1]	[2, 2]
    C. (1, 0)	(2, 1)	(3, 2)
    D. 0	1	2

答案： A
enumerate(list1)，每个元素为元组： 下标,值

12. 我们在课堂上介绍过如何通过循环+整商和求模结合获得一个正整数的各位数字，也可以采取另外一种方法，
首先通过str函数将其转换为字符串，接下来可以使用列表推导式获得其各位数字，请给出具体的实现方法。 
假设 n = 123456，你的列表推导式实现得到的新列表应该是 [1, 2, 3, 4, 5, 6]


答案：
n = 123456
print([int(x) for x in str(n)])






