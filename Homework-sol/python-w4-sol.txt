
1. 下面是一个函数定义
def f(p1, p2, p3=0, p4=0):
    pass

    下面的选项用于调用函数f，请问哪些选项是正确的？
A. f(1, 2, 3, 4)
B. f(p1 = 1, 2, 3, 4)
C. f(p1 = 1, p2 = 2, p3 = 3, 4)
D. f(p1 = 1, p2 = 2, p3 = 3, p4 = 4)
E. f(p1 = 1, p3 = 3, p2 = 2, p4 = 4)
F. f(1, 2, 3, p4 = 4)


答案： A D E F
考察函数调用的参数匹配：
首先调用顺序为位置参数,关键字参数，这样 B C 都不允许
其次  所有参数都有匹配，且一个也不能多，一个也不能少
A. f(1, 2, 3, 4)   按照位置匹配，正确
D. f(p1 = 1, p2 = 2, p3 = 3, p4 = 4)  采用关键字，都匹配了，正确
E. f(p1 = 1, p3 = 3, p2 = 2, p4 = 4)  采用关键字，且都匹配了
F. f(1, 2, 3, p4 = 4)   前面位置参数逐个匹配，最后p4也匹配了，正确

注意：如果f(1, 2, 3, p3 = 2, p4=4)  首先位置参数逐个匹配，然后p3也要匹配2，不能重复匹配，错误


2 请问下述函数的定义有没有错？如果没有错，调用xFunciton(1,2)的返回值是什么？
def xFunction(x, y):
    print(x + y)
    return

答案：
  没有错。其完成的功能： 输出两个参数的值，返回None。因此返回值为None
  # 没有return语句时，相当于 return None 
  # return ---> return None


3. 如何判断两个浮点数是否相等，一种方式是使用math.isclose(x, y)
   请你也写一个函数almost_equal来实现类似的功能，该函数应该包括3个参数，前面两个参数为要比较的数x和y，
   最后一个参数为epsilon,给出了两者相差小于多少时判断为相等，epsilon缺省为10的-10次方。
    在你的实现中需要使用内置函数abs(x)，返回x的绝对值。

   你编写的代码可以使用下述代码进行测试，该代码中：
   
      i从0.0开始，每次增加0.1，判断当前的i值是否等于1.0， 如果相等，则循环结束。循环最多重复20次。
     如果在i=10时，结束循环，则说明你的实现是正确的。


def test_equal():
    """ Try out the equals function """
    i = 0.0
    for j in range(20):
        i += 0.1
        print("i =", i)
        # if i >= 1.0:
        #      break 
         if  almost_equal(i, 1.0, 0.0001):
            print(i, "almost equals to 1.0")
            break
    else:
        print('almost_equal fails!')


test_equal()


# 答案 --------------------------------

def almost_equal(x, y, epsilon=1e-10):
    return abs(x - y) < epsilon

   # 下面的写法就冗余了
    s = expr 
    # return s 
    if s == True:
       return True
    else：
       return False

# -------------------------------------


4.  不执行下述代码，请给出两个print函数最后的输出。
month = "June"
day = 5
year = 2011
print("The date is {} {}, {}.".format(month, day, year))
print("{:<15s}: {:>8.1f}".format("Length",23.875))

答案：
The date is June 5, 2011.
Length         :     23.9

The date is {} {}, {}. 分别被后面的值替代，这样
输出： The date is June 5, 2011.
{:<15s}: {:>8.1f}  第一个值左对齐，右边填充空格直到15个字符，因此右边填充15-6=9个空格。
第2个值右对齐，小数点后一位，23.9，左边填充8-4=4个空格。



5. 我们补充介绍了f-string，请将上一题的最后两个语句改写，不用字符串的format方法，而是采用f-string实现。

答案：
print(f"The date is {month} {day}, {year}.")
print(f"{'Length':<15s}: {23.875:>8.1f}")
只需要将format后面的参数直接添加进对应的大括号里面就可以了，在格式化"Length"时使用单引号。
注意fstring里面的{}里面是不允许转义的。

6. 我们想要输出一张表格，给出了正多边形的各个内角和、每个内角以及每个外外角的度数，下面的代码给出了相应的实现。
但是其输出不是那么令人满意，我们希望采用字符串的format方法，修改代码，使得其输出的是一个比较整齐的表格形
式（在记事本等编辑器中，请选择等宽字体查看），请给出修改后的代码。

print('side', 'total', 'interior', 'exterior')
for n in range(3, 11):
    print(n, 180 * (n - 2), 180 * (n - 2) / n, 360 / n)

上面的代码输出的部分内容
side total interior exterior
3 180 60.0 120.0
4 360 90.0 90.0
5 540 108.0 72.0

期待输出：
side   total      interior   exterior
3      180        60.00      120.00
4      360        90.00      90.00
5      540        108.00     72.00
6      720        120.00     60.00
7      900        128.57     51.43
8      1080       135.00     45.00
9      1260       140.00     40.00
10     1440       144.00     36.00


答案：
所有4列都是左对齐，只要确定好每一列的宽度就可以了。倒数第1和第2列都是保留小数点2位。

print('{:<6} {:<10} {:<10} {:<10}'.format('side', 'total', 'interior', 'exterior'))

for n in range(3, 11):
    print('{:<6} {:<10} {:<10.2f} {:<10.2f}'.format (n, 180 * (n - 2), 180 * (n - 2) / n, 360 / n))

